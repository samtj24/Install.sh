name: 🧪 Test Installation Scripts

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Запуск каждую неделю в понедельник в 9:00 UTC
    - cron: '0 9 * * 1'

jobs:
  shellcheck:
    name: 🔍 ShellCheck Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐚 Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: '.'
        format: gcc
        severity: error
      env:
        SHELLCHECK_OPTS: -e SC2034 -e SC2086 -e SC2181

  syntax-check:
    name: 🔧 Bash Syntax Check  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ✅ Check install_arch.sh syntax
      run: |
        if [ -f "install_arch.sh" ]; then
          bash -n install_arch.sh
          echo "✅ install_arch.sh syntax OK"
        else
          echo "⚠️ install_arch.sh not found"
        fi
        
    - name: ✅ Check install_arch_uefi.sh syntax
      run: |
        if [ -f "install_arch_uefi.sh" ]; then
          bash -n install_arch_uefi.sh
          echo "✅ install_arch_uefi.sh syntax OK"
        else
          echo "⚠️ install_arch_uefi.sh not found"
        fi

  config-validation:
    name: 📋 Config Files Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🎯 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y yamllint
        
    - name: ✅ Validate Alacritty config
      run: |
        if [ -f "configs/alacritty.yml" ]; then
          yamllint configs/alacritty.yml
          echo "✅ Alacritty config is valid YAML"
        else
          echo "⚠️ configs/alacritty.yml not found"
        fi
        
    - name: ✅ Check i3 config syntax
      run: |
        if [ -f "configs/i3/config" ]; then
          # Базовая проверка наличия обязательных секций
          if grep -q "set \$mod" configs/i3/config; then
            echo "✅ i3 config contains mod key definition"
          else
            echo "❌ i3 config missing mod key definition"
            exit 1
          fi
          
          if grep -q "bindsym" configs/i3/config; then
            echo "✅ i3 config contains key bindings"
          else
            echo "❌ i3 config missing key bindings"
            exit 1
          fi
        else
          echo "⚠️ configs/i3/config not found"
        fi

  documentation-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔗 Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'
        
    - name: 📝 Validate README structure
      run: |
        if [ -f "README.md" ]; then
          # Проверяем наличие основных разделов
          if grep -q "# 🐧 Arch Linux Auto Installer" README.md; then
            echo "✅ README has main title"
          else
            echo "❌ README missing main title"
            exit 1
          fi
          
          if grep -q "## 🚀 Быстрый старт" README.md; then
            echo "✅ README has quick start section"
          else
            echo "❌ README missing quick start section"
            exit 1
          fi
        else
          echo "❌ README.md not found"
          exit 1
        fi

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run security scan
      run: |
        # Проверка на потенциально опасные команды
        echo "🔍 Checking for potentially dangerous commands..."
        
        DANGEROUS_PATTERNS=(
          "rm -rf /"
          "dd if="
          "mkfs\." 
          "wipefs"
          "parted"
        )
        
        for pattern in "${DANGEROUS_PATTERNS[@]}"; do
          if grep -r "$pattern" *.sh 2>/dev/null; then
            echo "⚠️ Found potentially dangerous command: $pattern"
            echo "   This is expected for installation scripts, but please review carefully"
          fi
        done
        
        # Проверка на жестко закодированные пароли/ключи
        echo "🔍 Checking for hardcoded secrets..."
        if grep -r -i "password.*=" *.sh 2>/dev/null | grep -v "read -s"; then
          echo "❌ Found potential hardcoded password"
          exit 1
        fi
        
        echo "✅ Security scan completed"

  test-environment:
    name: 🧪 Test Environment Setup
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐋 Test script in Docker container
      run: |
        # Создаем минимальный тест в контейнере
        cat > test_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🧪 Testing script functionality..."
        
        # Мокаем опасные команды для тестирования
        function wipefs() { echo "MOCK: wipefs $@"; }
        function parted() { echo "MOCK: parted $@"; }
        function mkfs.ext4() { echo "MOCK: mkfs.ext4 $@"; }
        function mkswap() { echo "MOCK: mkswap $@"; }
        function mount() { echo "MOCK: mount $@"; }
        function pacstrap() { echo "MOCK: pacstrap $@"; }
        function arch-chroot() { echo "MOCK: arch-chroot $@"; }
        function genfstab() { echo "MOCK: genfstab"; }
        
        export -f wipefs parted mkfs.ext4 mkswap mount pacstrap arch-chroot genfstab
        
        # Тестируем функции проверки
        if [ -f "install_arch.sh" ]; then
          echo "📋 Testing disk size check logic..."
          
          # Извлекаем логику проверки размера диска
          MIN_SIZE=$((8*1024*1024*1024))
          TEST_SIZE=$((10*1024*1024*1024))
          
          if [ "$TEST_SIZE" -gt "$MIN_SIZE" ]; then
            echo "✅ Disk size check logic works"
          else
            echo "❌ Disk size check logic failed"
            exit 1
          fi
        fi
        
        echo "✅ Basic functionality test passed"
        EOF
        
        chmod +x test_script.sh
        bash test_script.sh

  generate-report:
    name: 📊 Generate Test Report
    runs-on: ubuntu-latest
    needs: [shellcheck, syntax-check, config-validation, documentation-check, security-scan, test-environment]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📊 Generate summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| ShellCheck | ${{ needs.shellcheck.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Syntax Check | ${{ needs.syntax-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Config Validation | ${{ needs.config-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment Test | ${{ needs.test-environment.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
